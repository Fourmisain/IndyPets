import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes

plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
}

targetCompatibility = sourceCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version + '-' + project.minecraft_version
group = project.maven_group

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 8
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

task finalize {
	doLast {
		// delete "header files" from jar
		var jar = file("build/libs/${project.archives_base_name}-${project.version}.jar").toPath()
		if (Files.exists(jar)) {
			var jarFileUri = new URI('jar:file', jar.toUri().getSchemeSpecificPart(), jar.toUri().getFragment())

			try (FileSystem fs = FileSystems.newFileSystem(jarFileUri, ['create': 'false'])) {
				Files.walkFileTree(fs.getPath("com/faboslav"), new DeletingFileVisitor());
			}
		}
	}
}

build.finalizedBy(finalize)

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// mavenLocal()
	}
}

class DeletingFileVisitor extends SimpleFileVisitor<Path> {
	@Override
	FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {
		Files.delete(path);
		return FileVisitResult.CONTINUE;
	}

	@Override
	FileVisitResult postVisitDirectory(Path directory, IOException ioException) throws IOException {
		Files.delete(directory);
		return FileVisitResult.CONTINUE;
	}
}
import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes

plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version + '-' + project.minecraft_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

processResources {
	def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
	stringProperties.each { inputs.property(it.key, it.value) }

	['fabric.mod.json', "${project.archives_base_name}.mixins.json"].each {
		filesMatching(it) {
			expand(stringProperties) {
				escapeBackslash = true
			}
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = project.java_version as Integer
}

java {
	targetCompatibility = sourceCompatibility = JavaVersion.toVersion(project.java_version as Integer)
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

task finalize {
	doLast {
		// delete "header files" from jar
		var jar = remapJar.archiveFile.get().asFile.toPath()
		if (Files.exists(jar)) {
			var jarFileUri = new URI('jar:file', jar.toUri().getSchemeSpecificPart(), jar.toUri().getFragment())

			try (FileSystem fs = FileSystems.newFileSystem(jarFileUri, ['create': 'false'])) {
				def p = fs.getPath("com/faboslav")
				if (Files.exists(p)) {
					Files.walkFileTree(fs.getPath("com/faboslav"), new DeletingFileVisitor());
				}
			}
		}
	}
}

build.finalizedBy(finalize)

class DeletingFileVisitor extends SimpleFileVisitor<Path> {
	@Override
	FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {
		Files.delete(path);
		return FileVisitResult.CONTINUE;
	}

	@Override
	FileVisitResult postVisitDirectory(Path directory, IOException ioException) throws IOException {
		Files.delete(directory);
		return FileVisitResult.CONTINUE;
	}
}
plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.+'
	id 'minepkg-publish' version 'latest.release'
}

version = project.mod_version + '-' + project.minecraft_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	accessWidenerPath = file("src/main/resources/indypets.accesswidener")
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc")
	}

	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

processResources {
	def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
	stringProperties.each { inputs.property(it.key, it.value) }

	['fabric.mod.json', "${project.archives_base_name}.mixins.json"].each {
		filesMatching(it) {
			expand(stringProperties) {
				escapeBackslash = true
			}
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = project.java_version as Integer
}

java {
	targetCompatibility = sourceCompatibility = JavaVersion.toVersion(project.java_version as Integer)
	withSourcesJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

def changesMd = file('changes.md').exists() ? file('changes.md').getText('UTF-8') : ''
def toList = (String s) -> s.split(',').collect{ it.trim() }
def gameVersionList = toList(project.game_version_list)

modrinth {
	def MODRINTH_TOKEN = System.getenv('MODRINTH_TOKEN')
	if (MODRINTH_TOKEN != null) {
		token = MODRINTH_TOKEN
		projectId = project.modrinth_id
		versionName = project.mod_version
		versionNumber = project.version
		versionType = 'release'
		uploadFile = remapJar
		changelog = changesMd
		gameVersions = gameVersionList
		loaders = ['fabric']
		dependencies {
			toList(project.modrinth_dependencies).each{ required.project(it) }
		}
	}
}

tasks.modrinth.dependsOn("build") // ensure finalizer to delete "header files" runs

curseforge {
	def CURSEFORGE_TOKEN = System.getenv('CURSEFORGE_TOKEN')
	if (CURSEFORGE_TOKEN != null) {
		apiKey = CURSEFORGE_TOKEN
		project {
			id = project.curseforge_id
			releaseType = 'release'
			changelogType = 'markdown'
			changelog = changesMd

			addGameVersion 'Fabric'
			gameVersionList.each{ addGameVersion(it) }

			relations {
				toList(project.curseforge_dependencies).each{ requiredDependency(it) }
			}
			mainArtifact(remapJar.archiveFile.get().asFile) {
				displayName = "IndyPets ${project.mod_version} [${versionRange(gameVersionList)}]"
			}
			afterEvaluate {
				uploadTask.dependsOn('build')
			}
		}
		options {
			forgeGradleIntegration = false
			javaVersionAutoDetect = false
		}
	}
}

minepkg {
	def MINEPKG_TOKEN = System.getenv("MINEPKG_TOKEN")
	if (MINEPKG_TOKEN != null) {
		apiKey = MINEPKG_TOKEN
		artifact = remapJar
		platform = 'fabric'
		name = project.minepkg_id
		version = project.mod_version + "+" + project.minecraft_version
		license = "MIT"
		minecraftVersionRange = project.game_version_range
		toList(project.minepkg_dependencies).each{ require(it) }
	}
}

static String versionRange(List<String> gameVersions) {
	if (gameVersions.size() == 1)
		return gameVersions[0]

	def v0 = gameVersions.first()
	def v1 = gameVersions.last()

	def s0 = v0.split('[.]').collect { it as Integer}
	def s1 = v1.split('[.]').collect { it as Integer}

	// 1.19.3, 1.19.4 -> 1.19.3/4
	if (s0.size() == 3 && s1.size() == 3 && s0[0] == s1[0] && s0[1] == s1[1] && s1[2] - s0[2] == 1) {
		return "${s1[0]}.${s1[1]}.${s0[2]}/${s1[2]}"
	}

	return "${v0} - ${v1}"
}
